@*@page "/"
@inject OpenAIApiService _openAIApiService
@inject MudBlazor.ISnackbar snackBar
@using System.Collections.Generic

    <div class="container mx-auto py-4 mt-20">
        <h1 class="text-3xl text-center font-semibold mb-4">Messages</h1>
        <div class="space-y-4 text-xlg">
            @foreach (var message in Messages)
            {
                <div class="font-semibold text-blue-600">@message.Key</div>
                <div class="text-gray-800">@message.Value</div>
            }
        </div>
    </div>
    <div class="fixed bottom-6 left-0 right-0 flex flex-col items-center">
        <div class="mx-auto px-4 py-2 my-1">
            <PromptDrawer></PromptDrawer>
        </div>

        <div class="w-full mx-auto px-4 py-2 my-1">
            <form class="bg-gray-200 rounded-md shadow-lg p-4 mx-4 md:mx-auto md:w-full" @onsubmit="SendMessage">
                <div class="flex">
                    <input @bind="UserMessage" type="text" class="border-none w-full focus:outline-none bg-transparent" placeholder="Enter text...">
                    <button type="submit" class="bg-gray-300 text-gary-200 p-2 rounded-md ml-2 focus:outline-none">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16" fill="currentColor" transform="rotate(45)">
                            <path d="M12 2L3 22h18zM11 12l-2.586-2.586L11 6.828zm1.586-.414L13 9.172l-1.586 1.586zm0 1.172l1.586 1.586L13 15.172zm-2.586 2.244L8.828 13l1.172-1.172z" />
                        </svg>
                    </button>
                </div>
            </form>
        </div>
        <div class="max-w-screen-xl w-full mx-auto py-1">
            <Footer></Footer>
        </div>
    </div>

    @code {
        private string UserMessage { get; set; }
        private Dictionary<string, string> Messages { get; set; } = new();

        private async Task SendMessage()
        {
            if (string.IsNullOrEmpty(UserMessage))
            {
                snackBar.Add("Message is required.", Severity.Error);
                return;
            }

            try
            {
                var response = await _openAIApiService.SendMessageAsync(UserMessage);
                if (!Messages.ContainsKey(UserMessage))
                {
                    Messages.Add(UserMessage, response);
                }
                UserMessage = string.Empty;
            }
            catch (Exception ex)
            {
                snackBar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }

    }*@