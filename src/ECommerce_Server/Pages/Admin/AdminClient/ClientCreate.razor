@*@page "/clientcreate"
@inject IClientRepository _clientRepository
@inject IFileUpload _fileUpload
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar
@attribute [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Client)]


<_ClientPanelHeader></_ClientPanelHeader>


<div class="flex justify-center">
    <div class="w-full max-w-sm">
        <h2 class="text-center text-3xl leading-9 font-extrabold text-gray-900">
            @Title Client
        </h2>
        <MudForm class="mt-8" OnValidSubmit="UpsertClient">
            <MudTextField @bind-Value="Client.Name" Label="Name" Required="true" />
            <MudTextField @bind-Value="Client.Address" Label="Address" />
            <MudTextField @bind-Value="Client.DomainName" Label="Domain Name" Required="true" />
            <MudTextField @bind-Value="Client.Description" Label="Description" />
            <MudTextField @bind-Value="Client.Email" Label="Email" Required="true" />
            <MudTextField @bind-Value="Client.ImageUrl" Label="Image URL" />
            <MudButton Type="submit" Color="Color.Primary" class="mt-6" FullWidth="true">@Title</MudButton>
        </MudForm>
    </div>
</div>

@code {

    [Parameter]
    public int ClientId { get; set; }

    private ClientDTO Client { get; set; } = new()
    {
        ImageUrl = "/img/lb_logoLight.jpg"
    };
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    public string ErrorMessage = "Bad request";
    public string OldImageUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadClient();
        }
    }

    private async Task LoadClient()
    {
        IsLoading = true;
        StateHasChanged();
        if (ClientId != 0)
        {
            Title = "Update";
            Client = await _clientRepository.Get(ClientId);
            OldImageUrl = Client.ImageUrl;
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertClient()
    {
        if (Client.ClientId == 0)
        {
            await _clientRepository.Create(Client);
            snackBar.Add("Client created Succesfully. Refresh page to view updated product list", Severity.Success);
        }
        else
        {
            if (OldImageUrl != Client.ImageUrl)
            {
                _fileUpload.DeleteFile(OldImageUrl);
            }
            await _clientRepository.Update(Client);
            snackBar.Add("Client updated Succesfully.", Severity.Success);
        }
        _navigationManager.NavigateTo("/Client-list");
    }

    private async Task HandleImageUpLoad(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".avif" ||
                        fileInfo.Extension.ToLower() == ".jpeg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpg")
                    {
                        Client.ImageUrl = await _fileUpload.UpLoadFile(file);
                    }
                    else
                    {
                        snackBar.Add("Invalid file type! only avif, jpeg, jpg, and png files are valid.", Severity.Error);
                        return;
                    }
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            snackBar.Add($"{ex}", Severity.Info);
            snackBar.Add($"Invalid Image", Severity.Warning);
            IsLoading = false;
        }
    }
}*@

