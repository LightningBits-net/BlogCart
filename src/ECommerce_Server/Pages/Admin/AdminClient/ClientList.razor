@page "/ClientList"
@inject IClientRepository _clientRepository
@inject IDialogService DialogService
@inject IFileUpload _fileUpload
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar
@attribute [Authorize(Roles = SD.Role_Admin)]


<_ClientPanelHeader></_ClientPanelHeader>
<div class="flex justify-center items-center overflow-x-auto">
    <div class="overflow-x-auto">
        <div class="bg-white text-black border p-4 shadow rounded overflow-x-auto">
            <h1 class="mb-8 text-3xl text-white bg-black py-4">Client List</h1>
            @if (Clients.Any())
            {
                <table class="w-full overflow-x-auto min-h-64">

                    <thead class="bg-gray-400 w-full text-black">
                        <tr>
                            <th class=" w-1/8"></th>
                            <th class=" w-1/4 px-4 py-4">Domain Name</th>
                            <th class=" w-1/8 px-4 py-4">Name</th>
                            <th class=" w-1/8 px-4 py-2">Created on</th>
                            <th class=" w-1/8 px-4 py-2">Counter</th>
                            <th class=" w-1/8 px-4 py-2">.</th>
                            <th class=" w-1/8 px-4 py-2">.</th>
                        </tr>
                    </thead>
                    <tbody class="">
                        @foreach (var client in Clients)
                        {
                            <tr>
                                <td class="border">
                                    <img src="@client.ImageUrl" width="100" height="100">
                                </td>
                                <th class="border px-4 py-2 bold">@((MarkupString)client.DomainName)</th>
                                <td class="border px-4 py-2">@client.Name</td>
                                <td class="border px-4 py-2">@client.DateCreated</td>
                                <td class="border px-4 py-2">@client.Counter</td>

                                <td class="p-2">
                                    <MudButton Href="@($"client/edit/{client.ClientId}")" Variant="Variant.Outlined" Color="Color.Dark">Edit</MudButton>
                                </td>
                                <td>
                                    <MudMenu Icon="@Icons.Material.Filled.Delete" Color="Color.Dark" Variant="Variant.Outlined">
                                        <MudButton>
                                            @*<MudButton OnClick="@(()=>DeleteBlog(client.ClientId))" Variant="Variant.Filled" Color="Color.Error">Confirm Delete of: <br />@client.DomainName</MudButton>
                                            <MudButton Href="" Variant="Variant.Filled" Color="Color.Dark">Cancel</MudButton>*@
                                        </MudButton>
                                    </MudMenu>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                if (IsLoading)
                {
                    <div class="text-center">
                        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                    </div>
                }
                else
                {
                    <p>No Data to Display</p>
                }
            }
        </div>
    </div>
</div>

@code {
    public bool IsLoading { get; set; }
    private IEnumerable<ClientDTO> Clients { get; set; } = new List<ClientDTO>();
    private int DeleteClientId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadClients();
        }
        else
        {
            return;
        }
    }

    private async Task LoadClients()
    {
        IsLoading = true;
        StateHasChanged();
        Clients = await _clientRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task DeleteBlog(int id)
    {
        DeleteClientId = id;
        IsLoading = true;
        if (DeleteClientId != 0)
        {
            ClientDTO client = await _clientRepository.Get(DeleteClientId);
            if (!client.ImageUrl.Contains("/img/lb_logoLight.jpg"))
            {
                _fileUpload.DeleteFile(client.ImageUrl);
            }
            await _clientRepository.Delete(DeleteClientId);
            snackBar.Add("Client Deleted.", Severity.Success);
            await LoadClients();
        }
        IsLoading = false;
    }
}

