@page "/BlogCatList"
@inject IBlogCategoryRepository _blogCategoryRepository
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar
@attribute [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Client)]


<_BlogPanelHeader></_BlogPanelHeader>

<div class="flex justify-center items-center overflow-x-auto">
    <div class="w-full bg-white text-center text-black border p-4 shadow rounded overflow-x-auto">
        <h1 class="mb-8 w-=full text-3xl text-white bg-black py-4">Category List</h1>
        @if (BlogCategories.Any())
        {
            <table class="w-full overflow-x-auto min-h-64">
                <thead class="bg-gray-400">
                    <tr>
                        <th class=" w-1/2 px-8 py-4">Name</th>
                        <th class=" w-1/4 px-4 py-2">Action</th>
                        <th class=" w-1/4 px-4 py-2">Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var objCat in BlogCategories)
                    {
                        <tr>
                            <td class="border px-4 py-2">@objCat.Name</td>
                            <td class="p-2">
                                <MudButton Href="@($"blogcatlist/edit/{objCat.Id}")" Variant="Variant.Outlined" Color="Color.Dark">Edit</MudButton>
                            </td>
                            <td class="p-2">
                                <MudMenu Icon="@Icons.Material.Filled.Delete" Color="Color.Dark" Variant="Variant.Outlined">
                                    <MudButton>
                                        <MudButton OnClick="@(()=>DeleteCategory(objCat.Id))" Variant="Variant.Filled" Color="Color.Error">Confirm Delete of:<br />"@objCat.Name"</MudButton>
                                        <MudButton Href="" Variant="Variant.Filled" Color="Color.Dark">Cancel</MudButton>
                                    </MudButton>
                                </MudMenu>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                <div class="text-center">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                </div>
            }
            else
            {
                <p>No Data to Display</p>
            }
        }
    </div>
</div>


@code {

    public bool IsLoading { get; set; }

    private IEnumerable<BlogCategoryDTO> BlogCategories { get; set; } = new List<BlogCategoryDTO>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        BlogCategories = await _blogCategoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task DeleteCategory(int id)
    {
        await _blogCategoryRepository.Delete(id);
        await LoadCategories();
        snackBar.Add("Category Deleted.", Severity.Success);
    }
}