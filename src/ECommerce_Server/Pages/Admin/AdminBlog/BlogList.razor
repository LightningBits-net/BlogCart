@page "/BlogList"
@inject IBlogRepository _blogRepository
@inject IDialogService DialogService
@inject IFileUpload _fileUpload
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar
@attribute [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Client)]


<_BlogPanelHeader></_BlogPanelHeader>
<div class="flex justify-center items-center overflow-x-auto">
    <div class="w-full lg:w-3/4 bg-white text-center text-black border p-4 shadow-2xl mx-auto rounded overflow-x-auto">
        <h1 class="mb-8 w-full text-3xl text-white bg-black py-4">Blog List</h1>
        @if (Blogs.Any())
        {
            <div class="max-h-screen overflow-y-auto">
                <table class="w-full overflow-x-auto min-h-96">
                    <thead class="bg-gray-400 w-full text-black">
                        <tr>
                            <th class="w-1/8"></th>
                            <th class="w-1/4 px-4 py-4">
                                <button class="flex items-center space-x-1 focus:outline-none" @onclick='() => SortBy("Name")'>
                                    <span>Name</span>
                                    @if (currentSortColumn == "Name")
                                    {
                                        <span class="text-sm">
                                            @if (isSortAscending)
                                            {
                                                <i class="fas fa-sort-up"></i>
                                            }
                                            else
                                            {
                                                <i class="fas fa-sort-down"></i>
                                            }
                                        </span>
                                    }
                                </button>
                            </th>
                            <th class="w-1/8 px-4 py-2">
                                <button class="flex items-center space-x-1 focus:outline-none" @onclick='() => SortBy("Status")'>
                                    <span>Status</span>
                                    @if (currentSortColumn == "Status")
                                    {
                                        <span class="text-sm">
                                            @if (isSortAscending)
                                            {
                                                <i class="fas fa-sort-up"></i>
                                            }
                                            else
                                            {
                                                <i class="fas fa-sort-down"></i>
                                            }
                                        </span>
                                    }
                                </button>
                            </th>
                            <th class="w-1/8 px-4 py-2">
                                <button class="flex items-center space-x-1 focus:outline-none" @onclick='() => SortBy("Date")'>
                                    <span>Created on</span>
                                    @if (currentSortColumn == "Date")
                                    {
                                        <span class="text-sm">
                                            @if (isSortAscending)
                                            {
                                                <i class="fas fa-sort-up"></i>
                                            }
                                            else
                                            {
                                                <i class="fas fa-sort-down"></i>
                                            }
                                        </span>
                                    }
                                </button>
                            </th>
                            <th class="w-1/8 px-4 py-2">Last update</th>


                            <th class="w-1/8 px-4 py-4">
                                <button class="flex items-center space-x-1 focus:outline-none" @onclick='() => SortBy("Category")'>
                                    <span>Category</span>
                                    @if (currentSortColumn == "Category")
                                    {
                                        <span class="text-sm">
                                            @if (isSortAscending)
                                            {
                                                <i class="fas fa-sort-up"></i>
                                            }
                                            else
                                            {
                                                <i class="fas fa-sort-down"></i>
                                            }
                                        </span>
                                    }
                                </button>
                            </th>

                            <th class="w-1/8 px-4 py-2">
                                <button class="flex items-center space-x-1 focus:outline-none" @onclick='() => SortBy("Views")'>
                                    <span>Views</span>
                                    @if (currentSortColumn == "Views")
                                    {
                                        <span class="text-sm">
                                            @if (isSortAscending)
                                            {
                                                <i class="fas fa-sort-up"></i>
                                            }
                                            else
                                            {
                                                <i class="fas fa-sort-down"></i>
                                            }
                                        </span>
                                    }
                                </button>
                            </th>
                            <th class="w-1/8 px-4 py-2"></th>
                            <th class="w-1/8 px-4 py-2"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var blog in Blogs.Take(10))
                        {
                            <tr>
                                <td class="border">
                                    <img src="@blog.ImageUrl" width="100" height="100">
                                </td>
                                <td class="border px-4 py-2 font-bold">@((MarkupString)blog.Name)</td>
                                <td class="border px-4 py-2">@blog.Status</td>
                                <td class="border px-4 py-2">@blog.DateCreated.ToShortDateString()</td>
                                <td class="border px-4 py-2">@blog.LastUpdated.ToShortDateString()</td>
                                <td class="border px-4 py-2">@blog.BlogCategory.Name</td>
                                <td class="border px-4 py-2">@blog.Views</td>
                                <td class="p-2">
                                    <MudButton Href="@($"blog/edit/{blog.Id}")" Variant="Variant.Outlined" Color="Color.Dark">Edit</MudButton>
                                </td>
                                <td>
                                    <MudMenu Icon="@Icons.Material.Filled.Delete" Color="Color.Dark" Variant="Variant.Outlined">
                                        <MudButton>
                                            <MudButton OnClick="@(() => DeleteBlog(blog.Id))" Variant="Variant.Filled" Color="Color.Error">Confirm Delete of: <br />@blog.Name</MudButton>
                                            <MudButton Href="/bloglist" Variant="Variant.Filled" Color="Color.Dark">Cancel</MudButton>
                                        </MudButton>
                                    </MudMenu>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>

            <div class="w-full bg-gray-500 text-black py-4">

                @if (Blogs.Count() > 10)
                {
                    <p class="mt-2">Showing 10 of @Blogs.Count() entries</p>
                }
                else
                {
                    <p class="mt-2 text-black text-sm">Showing less than 10</p>
                }

            </div>
        }
        else
        {
            if (IsLoading)
            {
                <div class="text-center">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                </div>
            }
            else
            {
                <p>No Data to Display</p>
            }
        }
    </div>
        </div>


@code {
    public bool IsLoading { get; set; }
    private IEnumerable<BlogDTO> Blogs { get; set; } = new List<BlogDTO>();
    private int DeleteBlogId { get; set; } = 0;
    private string currentSortColumn = "Name";
    private bool isSortAscending = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadBlogs();
        }
        else
        {
            return;
        }
    }

    private async Task LoadBlogs()
    {
        IsLoading = true;
        StateHasChanged();
        Blogs = await _blogRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task DeleteBlog(int id)
    {
        DeleteBlogId = id;
        IsLoading = true;
        if (DeleteBlogId != 0)
        {
            BlogDTO blog = await _blogRepository.Get(DeleteBlogId);
            if (!blog.ImageUrl.Contains("/img/lb_logoLight.jpg"))
            {
                _fileUpload.DeleteFile(blog.ImageUrl);
            }
            await _blogRepository.Delete(DeleteBlogId);
            snackBar.Add("Blog Deleted.", Severity.Success);
            await LoadBlogs();
        }
        IsLoading = false;
    }

    private void SortBy(string columnName)
    {
        if (columnName == currentSortColumn)
        {
            isSortAscending = !isSortAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isSortAscending = true;
        }

        SortBlogs();
    }

    private void SortBlogs()
    {
        switch (currentSortColumn)
        {
            case "Name":
                if (isSortAscending)
                {
                    Blogs = Blogs.OrderBy(b => b.Name, StringComparer.OrdinalIgnoreCase);
                }
                else
                {
                    Blogs = Blogs.OrderByDescending(b => b.Name, StringComparer.OrdinalIgnoreCase);
                }
                break;
            case "Status":
                Blogs = isSortAscending ? Blogs.OrderBy(b => b.Status) : Blogs.OrderByDescending(b => b.Status);
                break;
            case "Date":
                Blogs = isSortAscending ? Blogs.OrderBy(b => b.DateCreated) : Blogs.OrderByDescending(b => b.DateCreated);
                break;
            case "Category":
                Blogs = isSortAscending ? Blogs.OrderBy(b => b.BlogCategory.Name) : Blogs.OrderByDescending(b => b.BlogCategory.Name);
                break;
            case "Views":
                Blogs = isSortAscending ? Blogs.OrderBy(b => b.Views) : Blogs.OrderByDescending(b => b.Views);
                break;
        }
    }

}
