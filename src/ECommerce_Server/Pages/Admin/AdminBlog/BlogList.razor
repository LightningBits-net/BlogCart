@page "/BlogList"
@inject IBlogRepository _blogRepository
@inject IDialogService DialogService
@inject IFileUpload _fileUpload
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar
@attribute [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Client)]

<_BlogPanelHeader></_BlogPanelHeader>

<div class="flex justify-center items-center overflow-x-auto">
    <div class="w-full lg:w-3/4 bg-white text-center text-black border p-4 shadow-2xl mx-auto rounded overflow-x-auto">
        <h1 class="mb-8 w-full text-3xl text-white bg-black py-4">Blog List</h1>

        @if (Blogs.Any())
        {
            <table class="w-full overflow-x-auto min-h-64">
                <thead class="bg-gray-400 w-full text-black">
                    <tr>
                        <th class="w-1/8"></th>
                        <th class="w-1/4 px-4 py-4" @onclick="@(() => SortBy(nameof(BlogDTO.Name)))">Name <span class="@GetSortIconClass(nameof(BlogDTO.Name))"></span></th>
                        <th class="w-1/8 px-4 py-4" @onclick="@(() => SortBy(nameof(BlogDTO.BlogCategory.Name)))">Category <span class="@GetSortIconClass(nameof(BlogDTO.BlogCategory.Name))"></span></th>
                        <th class="w-1/8 px-4 py-2" @onclick="@(() => SortBy(nameof(BlogDTO.DateCreated)))">Created on <span class="@GetSortIconClass(nameof(BlogDTO.DateCreated))"></span></th>
                        <th class="w-1/8 px-4 py-2" @onclick="@(() => SortBy(nameof(BlogDTO.LastUpdated)))">Last update <span class="@GetSortIconClass(nameof(BlogDTO.LastUpdated))"></span></th>
                        <th class="w-1/8 px-4 py-2" @onclick="@(() => SortBy(nameof(BlogDTO.Views)))">Views <span class="@GetSortIconClass(nameof(BlogDTO.Views))"></span></th>
                        <th class="w-1/8 px-4 py-2"></th>
                        <th class="w-1/8 px-4 py-2"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var blog in Blogs)
                    {
                        <tr>
                            <td class="border">
                                <img src="@blog.ImageUrl" width="100" height="100">
                            </td>
                            <th class="border px-4 py-2 bold">@((MarkupString)blog.Name)</th>
                            <td class="border px-4 py-2">@blog.BlogCategory.Name</td>
                            <td class="border px-4 py-2">@blog.DateCreated</td>
                            <td class="border px-4 py-2">@blog.LastUpdated</td>
                            <td class="border px-4 py-2">@blog.Views</td>
                            <td class="p-2">
                                <MudButton Href="@($"blog/edit/{blog.Id}")" Variant="Variant.Outlined" Color="Color.Dark">Edit</MudButton>
                            </td>
                            <td>
                                <MudMenu Icon="@Icons.Material.Filled.Delete" Color="Color.Dark" Variant="Variant.Outlined">
                                    <MudButton>
                                        <MudButton OnClick="@(() => DeleteBlog(blog.Id))" Variant="Variant.Filled" Color="Color.Error">Confirm Delete of: <br />@blog.Name</MudButton>
                                        <MudButton Href="/bloglist" Variant="Variant.Filled" Color="Color.Dark">Cancel</MudButton>
                                    </MudButton>
                                </MudMenu>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                <div class="text-center">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                </div>
            }
            else
            {
                <p>No Data to Display</p>
            }
        }
    </div>
</div>


@code {
    public bool IsLoading { get; set; }
    private IEnumerable<BlogDTO> Blogs { get; set; } = new List<BlogDTO>();
    private int DeleteBlogId { get; set; } = 0;
    private string currentSortColumn = "Name";
    private bool isSortAscending = true;
    private int ClientId { get; set; } = 3; // Set this to 3 for now

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadBlogs();
        }
        else
        {
            return;
        }
    }

    private async Task LoadBlogs()
    {
        IsLoading = true;
        StateHasChanged();
        Blogs = (await _blogRepository.GetAll()).Where(b => b.ClientId == ClientId);
        SortBlogs();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task DeleteBlog(int id)
    {
        DeleteBlogId = id;
        IsLoading = true;
        if (DeleteBlogId != 0)
        {
            BlogDTO blog = await _blogRepository.Get(DeleteBlogId);
            if (!blog.ImageUrl.Contains("/img/lb_logoLight.jpg"))
            {
                _fileUpload.DeleteFile(blog.ImageUrl);
            }
            await _blogRepository.Delete(DeleteBlogId);
            snackBar.Add("Blog Deleted.", Severity.Success);
            await LoadBlogs();
        }
        IsLoading = false;
    }

    private void SortBy(string columnName)
    {
        if (columnName == currentSortColumn)
        {
            isSortAscending = !isSortAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isSortAscending = true;
        }

        SortBlogs();
    }

    private void SortBlogs()
    {
        if (currentSortColumn.Equals(nameof(BlogDTO.Name)))
        {
            Blogs = isSortAscending
                ? Blogs.OrderBy(b => b.Name, StringComparer.OrdinalIgnoreCase)
                : Blogs.OrderByDescending(b => b.Name, StringComparer.OrdinalIgnoreCase);
        }
        else if (currentSortColumn.Equals(nameof(BlogDTO.BlogCategoryId)))
        {
            Blogs = isSortAscending
                ? Blogs.OrderBy(b => b.BlogCategoryId)
                : Blogs.OrderByDescending(b => b.BlogCategoryId);
        }
        else if (currentSortColumn.Equals(nameof(BlogDTO.DateCreated)))
        {
            Blogs = isSortAscending
                ? Blogs.OrderBy(b => b.DateCreated)
                : Blogs.OrderByDescending(b => b.DateCreated);
        }
        else if (currentSortColumn.Equals(nameof(BlogDTO.LastUpdated)))
        {
            Blogs = isSortAscending
                ? Blogs.OrderBy(b => b.LastUpdated)
                : Blogs.OrderByDescending(b => b.LastUpdated);
        }
        else if (currentSortColumn.Equals(nameof(BlogDTO.Views)))
        {
            Blogs = isSortAscending
                ? Blogs.OrderBy(b => b.Views)
                : Blogs.OrderByDescending(b => b.Views);
        }
   
    }

    private string GetSortIconClass(string columnName)
    {
        if (columnName == currentSortColumn)
        {
            return isSortAscending ? "fa fa-sort-up" : "fa fa-sort-down";
        }
        return "fa fa-sort";
    }
}
