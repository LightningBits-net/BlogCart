


@*@page "/chat/{conversationId:int}"
    @using ECommerce_Server.Service
    @inject IConversationRepository ConversationRepository
    @inject IMessageRepository MessageRepository
    @inject OpenAIApiService OpenAIApiService


    <PageTitle>My AI</PageTitle>
    <div class="flex justify-center">
        <div class="w-full h-screen bg-gray-800 pt-10">
            <div class="max-w-5xl mx-auto p-2 flex justify-end">
                <h1 class="font-display-italic text-gray-200 text-center font-extrabold text-5xl md:text-6xl italic leading-none mb-6 max-w-xl">My AI Assistant</h1>
            </div>
            <div class="flex flex-col">
                <div class="w-full">
                    <div class="sm:w-full md:w-3/4 lg:w-3/4 mx-auto overflow-y-auto max-h-[calc(100vh-15rem)] bg-gray-100 p-4 rounded-md">
                        <div class="messages overflow-y">
                            @foreach (var (message, index) in Messages.OrderBy(m => m.Timestamp).Reverse().Select((m, i) => (m, i)))
                            {
                                <div class="@($"{(index % 2 == 0 ? "bg-gray-200" : "")} p-2 rounded-md")"
                                     style="@($"{(index == Messages.Count - 1 ? "pb-4" : "")}")">
                                    @message.Content
                                </div>
                            }
                        </div>
                    </div>


                    <div class="sm:w-full md:w-3/4 lg:w-3/4 flex input mx-auto border border-gray-800 bg-gray-200 rounded-md mb-2 p-4">
                        <input @bind="UserMessage" type="text" class="text-xl border-none w-full focus:outline-none bg-transparent" placeholder="Enter text...">
                        <div class="mr-2">  <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="SendMessage" Style="margin-left">Send</MudButton></div>
                        <_PromptDrawer></_PromptDrawer>
                    </div>
                </div>

                <_Footer></_Footer>
            </div>
        </div>
    </div>




    @code {
        [Parameter]
        public int ConversationId { get; set; }

        private List<MessageDTO> Messages { get; set; } = new List<MessageDTO>();
        private string UserMessage { get; set; }

        protected override async Task OnInitializedAsync()
        {
            Messages = (await MessageRepository.GetAllByConversationId(ConversationId)).ToList();
        }

        private async Task SendMessage()
        {
            if (!string.IsNullOrWhiteSpace(UserMessage))
            {
                // Retrieve the last 20 messages from the current conversation
                var contextMessages = await MessageRepository.GetAllByConversationId(ConversationId);

                // Get the content of each message as an array of strings
                var context = contextMessages.Select(m => m.Content).ToArray();

                // Add the user message to the context
                var messages = context.Append(UserMessage).ToArray();

                // Combine the messages into a single string with a separator
                var contextString = string.Join("\n", messages);

                // Send the context and the user message to the OpenAI API
                var response = await OpenAIApiService.SendMessageAsync(contextString);

                // Create a new message object for the user message
                var userMessage = new MessageDTO
                {
                    Content = UserMessage,
                    ConversationId = ConversationId,
                    IsUserMessage = true // Indicate that it's a message from the user
                };

                // Save the user message in the database
                await MessageRepository.Create(userMessage);

                // Add the user message to the list of messages
                Messages.Add(userMessage);

                // Create a new message object for the AI response
                var aiResponse = new MessageDTO
                {
                    Content = response,
                    ConversationId = ConversationId,
                    IsUserMessage = false // Indicate that it's a response from the AI
                };

                // Save the AI response in the database
                await MessageRepository.Create(aiResponse);

                // Add the AI response to the list of messages
                Messages.Add(aiResponse);

                // Clear the input field
                UserMessage = string.Empty;
            }
        }
    }*@

