@page "/conversation-list"
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar
@inject IConversationRepository _conversationRepository
@inject IMessageRepository _messageRepository
@attribute [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Client)]

<div class="flex justify-center">
    <div class="max-w-lg w-full">
        <div class="bg-white shadow-md p-4">
            <h1 class="text-2xl font-bold mb-4">Conversations</h1>

            <div class="mb-4">
                <input type="text" class="w-full px-3 py-2 rounded border border-gray-300" placeholder="Enter a new conversation name" @bind="@newConversationName" />
            </div>

            <button class="px-4 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600" @onclick="CreateConversation">Create Conversation</button>

            @if (IsProcessing)
            {
                <div class="text-center mt-4">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                </div>
            }
            else
            {
                <div class="mt-4">
                    @if (Conversations == null || Conversations.Count() == 0)
                    {
                        <p>No conversations found.</p>
                    }
                    else
                    {
                        <ul class="list-disc pl-6">
                            @foreach (var conversation in Conversations)
                            {
                                <li class="flex items-center space-x-2">
                                    @if (conversation.Id != editingConversationId)
                                    {
                                        <a href="/chat/@conversation.Id" class="text-blue-500 hover:text-indigo-700">@conversation.Name</a>

                                        <button class="text-blue-500" @onclick="() => StartEditingConversation(conversation.Id)">Edit</button>
                                        <button class="text-red-500" @onclick="() => DeleteConversation(conversation.Id)">Delete</button>
                                    }
                                    else
                                    {
                                        <input type="text" class="w-1/2 px-3 py-2 rounded border border-gray-300" @bind="@editingConversationName" />
                                        <button class="text-green-500" @onclick="() => UpdateConversation(conversation.Id)">Submit</button>
                                        <button class="text-red-500" @onclick="CancelEditingConversation">Cancel</button>
                                    }
                                </li>
                            }
                        </ul>
                    }
                </div>
            }
        </div>
    </div>
</div>



@code {
    public bool IsProcessing { get; set; } = false;
    // Hard-coded client ID for testing purposes
    int clientId = 3;
    private IEnumerable<ConversationDTO> Conversations { get; set; } = new List<ConversationDTO>();
    string newConversationName = string.Empty;
    int editingConversationId = -1;
    string editingConversationName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Conversations = await _conversationRepository.GetAllByClientId(clientId);
        IsProcessing = false;
    }

    private async Task CreateConversation()
    {
        if (!string.IsNullOrWhiteSpace(newConversationName))
        {
            var newConversation = new ConversationDTO
            {
                Name = newConversationName,
                ClientId = clientId
            };

            await _conversationRepository.Create(newConversation);

            Conversations = await _conversationRepository.GetAllByClientId(clientId);

            newConversationName = string.Empty;
        }
    }

    private void StartEditingConversation(int conversationId)
    {
        editingConversationId = conversationId;
        var conversation = Conversations.FirstOrDefault(c => c.Id == conversationId);
        if (conversation != null)
        {
            editingConversationName = conversation.Name;
        }
    }

    private void CancelEditingConversation()
    {
        editingConversationId = -1;
        editingConversationName = string.Empty;
    }

    private async Task UpdateConversation(int conversationId)
    {
        if (!string.IsNullOrWhiteSpace(editingConversationName))
        {
            var conversation = Conversations.FirstOrDefault(c => c.Id == conversationId);
            if (conversation != null)
            {
                conversation.Name = editingConversationName;
                await _conversationRepository.Update(conversation);
            }

            editingConversationId = -1;
            editingConversationName = string.Empty;
        }
    }

    private async Task DeleteConversation(int conversationId)
    {
        var result = await _conversationRepository.Delete(conversationId);

        if (result > 0) // if conversation was deleted
        {
            Conversations = await _conversationRepository.GetAllByClientId(clientId);
            snackBar.Add("Conversation deleted successfully.", Severity.Success);
        }
        else
        {
            snackBar.Add("Failed to delete conversation.", Severity.Error);
        }
    }
}