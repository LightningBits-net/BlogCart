@page "/conversation-list"
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar
@inject IConversationRepository _conversationRepository
@inject IMessageRepository _messageRepository
@attribute [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Client)]

<div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4">Conversations</h1>

    <div class="mb-4">
        <input type="text" class="w-full px-3 py-2 rounded border border-gray-300" placeholder="Enter a new conversation name" @bind="@newConversationName" />
    </div>

    <button class="px-4 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600" @onclick="CreateConversation">Create Conversation</button>

    <div class="mt-4">
        @if (Conversations == null || Conversations.Count() == 0)
        {
            <p>No conversations found.</p>
        }
        else
        {
    <ul class="list-disc pl-6">
        @foreach (var conversation in Conversations)
        {
            <li class="flex items-center space-x-2">
                <button class="text-blue-500" @onclick="() => OpenChat(conversation.Id)">@conversation.Name</button>
                <button class="text-red-500" @onclick="() => DeleteConversation(conversation.Id)">Delete</button>
            </li>
        }
    </ul>
        }
    </div>
</div>

@code {
    // Hard-coded client ID for testing purposes
    int clientId = 3;
    private IEnumerable<ConversationDTO> Conversations { get; set; } = new List<ConversationDTO>();
    string newConversationName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Conversations = await _conversationRepository.GetAllByClientId(clientId);
    }

    private async Task CreateConversation()
    {
        if (!string.IsNullOrWhiteSpace(newConversationName))
        {
            var newConversation = new ConversationDTO
            {
                Name = newConversationName,
                ClientId = clientId
            };

            await _conversationRepository.Create(newConversation);

            Conversations = await _conversationRepository.GetAllByClientId(clientId);

            newConversationName = string.Empty;
        }
    }

    private void OpenChat(int conversationId)
    {
        _navigationManager.NavigateTo($"/chat/{conversationId}");
    }

    private async Task DeleteConversation(int conversationId)
    {
        var result = await _conversationRepository.Delete(conversationId);

        if (result > 0) // if conversation was deleted
        {
            Conversations = await _conversationRepository.GetAllByClientId(clientId);
            snackBar.Add("Conversation deleted successfully.", Severity.Success);
        }
        else
        {
            snackBar.Add("Failed to delete conversation.", Severity.Error);
        }
    }
}
