@page "/chat/{ConversationId:int}"
@page "/my-chat"

@inject IMessageRepository _messageRepository
@inject IConversationRepository _conversationRepository
@inject IOpenAiApiService _openAiApiService
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar

@attribute [Authorize(Roles = SD.Role_Admin + "," + SD.Role_LightningChats)]

@inherits CustomComponentBase

@using System.Text.RegularExpressions

<PageTitle>LightningChats</PageTitle>

<div class="container mx-auto flex flex-wrap">
    <div class="w-full h-screen">
        @if (IsProcessing)
        {
            <div class="text-center">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </div>
        }
        else
        {
            <MudCard Elevation="25">
                <div class="bg-gray-300 flex justify-center">
                    @if (MessageIsProcessing)
                    {
                        <p class="mt-5 text-lrg text-bold text-center">Processing...</p>
                    }
                    else
                    {

                        @if (Conversations == null || Conversations.Count() == 0)
                        {
                            <p class="text-center">No conversations found.</p>
                        }
                        else
                        {
                            <div class="p-4 flex items-center">
                                <div class="absolute top-0 left-0 bg-indigo-500 text-white rounded-full p-2 text-xs">
                                    <MudAvatar Color="Color.Secondary" Class="mt-15">AI</MudAvatar>
                                </div>

                                <MudNavMenu Dense="true" Rounded="true" Margin="Margin.Dense" Color="Color.Secondary" Class="pa-2">
                                    <MudNavGroup Title="@((Conversations.FirstOrDefault(c => c.Id == ConversationId))?.Name ?? "No conversation selected")" Expanded="false">
                                        @foreach (var conversation in Conversations)
                                        {
                                            <MudNavLink @onclick="() => NavigateToConversation(conversation.Id)">@conversation.Name</MudNavLink>
                                        }
                                    </MudNavGroup>
                                </MudNavMenu>
                            </div>
                        }
                    }
                </div>


                <MudCarousel Class="mud-width-full" Color="@Color.Primary" Style="height:600px" EnableSwipeGesture="@enableSwipeGesture" ShowBullets="@bullets" ShowArrows="@arrows" AutoCycle="false" TData="object">
                    <BulletTemplate Context="selected">
                        <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                            <span class="mud-icon-button-label">
                                <MudIcon Icon="@(selected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Circle)" Color="@Color.Inherit" />
                            </span>
                        </div>
                    </BulletTemplate>
                    <ChildContent>

                        @if (Messages == null || Messages.Count() == 0)
                        {
                                <p class="mt-10 ml-15 text-2xl  justify-center font-bold text-center">No Messages found.Please select a conversation to begin or create a new one from the drawer at the bottom.</p>
                        }
                        else
                        {
                            @for (int i = Messages.Count() - 2; i >= 0; i -= 2)
                            {
                                var prompt = Messages[i];
                                var response = Messages[i + 1];
                                var messageNumber = (Messages.Count() - i) / 2;

                                <MudCarouselItem Transition="Transition.Fade" Class="flex flex-col">
                                    <div class="bg-white border border-gray-200 shadow-3xl flex items-start justify-center h-screen p-5 overflow-auto">
                                        @if (MessageIsProcessing)
                                        {
                                            <div class="text-center">
                                                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                                            </div>
                                        }
                                        else
                                        {
                                            @*___________________________________Mesasage Display_____________________________________*@

                                            <MudCardContent>
                                                <div class="pb-10">
                                                    @*<div class="absolute top-0 right-0 bg-indigo-500 text-white rounded-full p-2 text-xs">
                                        @messageNumber
                                    </div>*@
                                                    @using System.Text.RegularExpressions

                                                    <div class="flex items-center">
                                                        @if (IsCodeSnippet(@response.Content))
                                                        {
                                                            var styledContent = Regex.Replace(@response.Content, @"\{([^}]*)\}", "<span class='text-blue-500'>{$1}</span>");
                                                            styledContent = Regex.Replace(styledContent, @"\(([^)]*)\)", "<span class='text-green-500'>($1)</span>");

                                                            <div class="bg-gray-200 p-10 rounded-md overflow-auto max-w-full text-lg">
                                                                <pre class="whitespace-pre-wrap"><code>@((MarkupString)styledContent)</code></pre>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <p class="text-left text-lg">@((MarkupString)@response.Content.Replace("\n", "<br/>"))</p>
                                                        }
                                                    </div>
                                                    <div class="flex justify-end items-end p-4">
                                                        @if (response.IsFav)
                                                        {
                                                            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Inherit" @onclick="(() => ToggleFavorite(response))" />
                                                        }
                                                        else
                                                        {
                                                            <MudIconButton Icon="@Icons.Material.Outlined.FavoriteBorder" Color="Color.Default" @onclick="(() => ToggleFavorite(response))" />
                                                        }
                                                    </div>
                                                </div>
                                            </MudCardContent>
                                        }
                                    </div>
                                </MudCarouselItem>
                            }
                        }
                    </ChildContent>
                </MudCarousel>

                @*___________________________________Input field_____________________________________*@

                <div class="w-full md:w-1/2 lg:w-1/2 border border-gray-200 bg-white shadow-2xl rounded justify-center text-center mx-auto fixed bottom-0 left-0 right-0 mb-2">
                    <div class="relative ml-5 flex items-center">
                        <MudTextField @ref="multilineReference" @bind-Value="@newMessageContent" T="string" Label="Enter Your Message" Variant="Variant.Text" Lines="4" />
                        <div class="ml-10 mr-2 bg-gray-300 rounded">
                            <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Primary" Size="Size.Medium" @onclick="SendMessage" />
                            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Primary" Size="Size.Medium" @onclick="@(() => OpenDrawer(Anchor.Bottom))" />
                        </div>
                    </div>
                </div>
            </MudCard>
        }

        @*_________________________________Drawer___________________________________________*@

        <div class="w-full md:w-1/2 lg:w-1/2 justify-center text-center mx-auto">
            <MudDrawer @bind-Open="@open" Anchor="@anchor" Width="100%" Height="75%" Elevation="20" Variant="@DrawerVariant.Temporary">
                <div class="p-5 bg-gray-100 h-screen">
                    <MudGrid>
                        @*___________________________________Conversation list_____________________________________*@
                        <MudItem xs="12" sm="6">
                            <div class="bg-gray-200 w-full p-2 space-y-2 flex flex-wrap">
                                <div class="bg-white w-full shadow-md border-2 border-gray-300 p-4 rounded-lg">
                                    <h2 class="font-display-italic font-extrabold text-2xl italic leading-none ">Conversation List</h2>
                                    <div class="p-4 flex items-center">
                                        <input type="text" class="w-full px-3 py-2 rounded border border-gray-300" placeholder="Enter a new conversation name" @bind="@newConversationName" />
                                        <button class="bg-gray-800 hover:bg-gray-600 text-white font-bold py-1 px-2 ml-2 rounded text-sm" @onclick="CreateConversation">create</button>
                                    </div>
                                    @if (IsProcessing)
                                    {
                                        <div class="mt-4">
                                            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="w-full max-h-[300px] overflow-y-auto">
                                            @if (Conversations == null || Conversations.Count() == 0)
                                            {
                                                <p class="text-center">No conversations found. Please create one to begin your AI chat</p>
                                            }
                                            else
                                            {
                                                <ul class="list-none pl-6">
                                                    @foreach (var conversation in Conversations)
                                                    {
                                                        <li class="flex items-center justify-between">
                                                            @if (conversation.Id != editingConversationId)
                                                            {
                                                                <button class="flex-1 hover:text-indigo-700" @onclick="(() => NavigateToConversation(conversation.Id))">@conversation.Name</button>

                                                                <div class="flex items-center space-x-8 mr-5">
                                                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" @onclick="() => StartEditingConversation(conversation.Id)" />
                                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" @onclick="() => DeleteConversation(conversation.Id)" />
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <input type="text" class="flex-1 px-3 py-2 rounded border border-gray-300" @bind="@editingConversationName" />

                                                                <div class="flex items-center space-x-2">
                                                                    <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Success" Size="Size.Small" @onclick="() => UpdateConversation(conversation.Id)" />
                                                                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Size="Size.Small" @onclick="CancelEditingConversation" />
                                                                </div>
                                                            }
                                                        </li>
                                                    }
                                                </ul>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </MudItem>


                        <MudItem xs="12" sm="6">
                            <div class="bg-gray-200 w-full p-2 space-y-2 flex flex-wrap">
                                <div class="bg-white w-full shadow-md border-2 border-gray-300 p-4 rounded-lg">
                                    <h1 class="font-display-italic font-extrabold text-2xl italic leading-none mb-1">Prompt Wizard</h1>
                                    <div class="p-4 flex items-center">
                                        <p class="text-lg mb-10 "> @GetSystemMessage(ConversationId)</p>
                                    </div>
                                </div>
                            </div>
                        </MudItem>

                        @*___________________________________System Prompts_____________________________________*@

                        <MudItem xs="12" sm="12">
                        </MudItem>

                        <MudItem xs="12" sm="12">
                            <div class="bg-gray-200 w-full p-2 space-y-2 flex flex-wrap">
                                <div class="bg-white w-full shadow-md border-2 border-gray-300 p-4 rounded-lg">
                                    <MudChipSet @bind-SelectedChips="selected" MultiSelection="true" Filter="true">
                                        <div class="p-2 space-y-2 flex flex-wrap">
                                            <div class="flex justify-center sm:justify-start">
                                                <h3 class="font-display-italic font-extrabold text-xl italic leading-none mr-5">Select your Prompts</h3>
                                                <p class="text-small">Save time by adding prompts to your conversations for permanent context</p>
                                            </div>
                                            <MudExpansionPanels>
                                                <MudExpansionPanel Text="Writng Style" MaxHeight="200">
                                                    <MudChip Text="Professional: Use a formal and business-like writing style." Variant="Variant.Text" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Friendly and conversational: Adopt a casual and approachable tone." Variant="Variant.Text" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Authoritative: Convey expertise and confidence in the writing style." Variant="Variant.Text" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Creative and engaging: Employ a more imaginative and captivating writing style." Variant="Variant.Text" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Using Humor in Writing" Variant="Variant.Text" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Moderate length: Provide a response of moderate length, around 100-200 words." Variant="Variant.Text" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Short and concise: Keep the response under 100 words." Variant="Variant.Text" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Detailed and informative: Include more extensive information in the response, exceeding 200 words." Variant="Variant.Text" Color="Color.Info"></MudChip>
                                                </MudExpansionPanel>
                                                <MudExpansionPanel Text="Trivia" MaxHeight="200">
                                                    <MudChip Text="Fun Facts: Generate responses with interesting and engaging trivia facts related to the user's query." Variant="Variant.Text" Color="Color.Primary"></MudChip>
                                                    <MudChip Text="Multiple Choice: Provide multiple-choice questions for the user to test their knowledge." Variant="Variant.Text" Color="Color.Primary"></MudChip>
                                                    <MudChip Text="Quick Answers: Deliver concise and straightforward answers to trivia questions." Variant="Variant.Text" Color="Color.Primary"></MudChip>
                                                </MudExpansionPanel>
                                                <MudExpansionPanel Text="Rhyming Poems" MaxHeight="1000">
                                                    <MudChip Text="Classic Rhyme: Generate poems with traditional rhyming patterns and structures." Variant="Variant.Text" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Free Verse: Create poems that focus on expressive imagery and emotions without strict rhyme schemes." Variant="Variant.Text" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Lighthearted: Craft playful and whimsical poems to entertain the user." Variant="Variant.Text" Color="Color.Info"></MudChip>
                                                </MudExpansionPanel>
                                                <MudExpansionPanel Text="Summaries">
                                                    <MudChip Text="Concise Summary: Provide brief and condensed summaries that capture the main points or highlights." Variant="Variant.Text" Color="Color.Primary"></MudChip>
                                                    <MudChip Text="Comprehensive Summary: Offer in-depth summaries that delve into the details and key elements of the subject matter." Variant="Variant.Text" Color="Color.Primary"></MudChip>
                                                    <MudChip Text="Visual Summary: Generate visually engaging summaries with bullet points, infographics, or diagrams." Variant="Variant.Text" Color="Color.Primary"></MudChip>
                                                </MudExpansionPanel>
                                                <MudExpansionPanel Text="Misc">
                                                    <MudChip Text="I'm your dedicated Blazor Server coding assistant" Color="Color.Success"></MudChip>
                                                    <MudChip Text="I'm your dedicated C# coding assistant" Color="Color.Success"></MudChip>
                                                    <MudChip Text="Lets write some code using C#, Tailwind CSS, and Razor Syntex in a blazor application" Color="Color.Success"></MudChip>
                                                    <MudChip Text="Responding to an Email Professionally" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Crafting an Engaging Proposal to Impress Potential Clients" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Writing a Compelling Cover Letter for Job Postings" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Crafting an Effective Elevator Pitch to Stand Out and Secure the Job" Color="Color.Info"></MudChip>
                                                    <MudChip Text="Crafting Engaging Responses to Social Media Posts" Color="Color.Info"></MudChip>
                                                </MudExpansionPanel>
                                                <MudExpansionPanel Text="MyPrompts Coming soon!">
                                                    Panel Four Content
                                                </MudExpansionPanel>

                                            </MudExpansionPanels>
                                        </div>
                                
                                    </MudChipSet>

                                    <div class="w-full p-2 space-y-2 flex flex-wrap">
                                        <div class="flex justify-center sm:justify-start">
                                            <h3 class="font-display-italic font-extrabold text-xl italic leading-none mr-5">Custom Prompt</h3>
                                        </div>
                                        <MudTextField Label="Your custom text" @bind-Value="customText" class="w-full md:w-96" />

                                        <MudText class="mt-2 text-center md:text-left">
                                            @*Settings: @string.Join(", ", selected.Select(chip => chip.Text)) @customText*@
                                        </MudText>
                                        <button class="w-full mt-5 bg-gray-800 hover:bg-gray-600 text-white font-bold py-2 px-3 rounded mt-2 md:mt-0" @onclick="() => UpdateSystemMessage(ConversationId, customText)">submit</button>
                                    </div>
                                </div>
                            </div>
                        </MudItem>
                    </MudGrid>
                </div>
            </MudDrawer>
        </div>
        @*_________________________________end Drawer______________________________________*@
    </div>
</div>


@code {
    private int clientId;
    [Parameter]
    public int ConversationId { get; set; }

    private List<MessageDTO> Messages { get; set; } = new List<MessageDTO>();
    private IEnumerable<ConversationDTO> Conversations { get; set; } = new List<ConversationDTO>();

    string newConversationName = string.Empty;
    int editingConversationId = -1;
    string editingConversationName = string.Empty;
    string newMessageContent = string.Empty;
    public bool IsProcessing { get; set; } = false;
    public bool MessageIsProcessing { get; set; } = false;

    #region MudBlazor
    private MudTextField<string> multilineReference;

    private bool arrows = true;
    private bool bullets = false;
    private bool enableSwipeGesture = true;
    private bool autocycle = false;
    private Transition transition = Transition.Slide;

    MudChip[] selected;
    bool open;
    Anchor anchor;
    private string selectedPrompt;
    private string customText;
    //private string Prompt1 = "Blog writer";
    //private string Prompt2 = "C# Code wiz kid";
    //private string Prompt3 = "Email Boss";
    //private string Prompt4 = "Social media Blaster";

    #endregion

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;

        await base.OnInitializedAsync();

        clientId = await ClientService.GetClientIdAsync(); // Retrieve clientId from the service

        if (clientId != 0) // Assuming 0 represents no clientId
        {
            await LoadConversations();
            await LoadMessages();
        }
        else
        {
            // Handle the case where ClientId is null or zero (e.g., user is not logged in or there's no client associated with this user)
        }

        IsProcessing = false;

        if (ConversationId == 0)
        {
            OpenDrawer(Anchor.Bottom);
        }
    }

    #region Helper Methods
    void OpenDrawer(Anchor anchor)
    {
        open = true;
        this.anchor = anchor;
    }


    bool IsCodeSnippet(string text)
    {
        // This is a simple example, you might need a more complex logic depending on your use case
        return text.Contains(";") || (text.Contains("{") && text.Contains("}")) || (text.Contains("<") && text.Contains(">"));

    }

    private async Task ToggleFavorite(MessageDTO message)
    {
        var success = await _messageRepository.ToggleFavorite(message.Id);
        if (success)
        {
            message.IsFav = !message.IsFav;
        }
    }

    void NavigateToConversation(int conversationId)
    {
        _navigationManager.NavigateTo($"/redirect/{conversationId}", true);
    }
    #endregion

    #region Message methods
    private async Task LoadMessages()
    {

        Messages = (await _messageRepository.GetAllByConversationId(ConversationId)).ToList();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessageContent))
        {
            MessageIsProcessing = true;

            var newMessage = new MessageDTO
            {
                Content = newMessageContent,
                ConversationId = ConversationId,
                IsUserMessage = true,
                Timestamp = DateTime.UtcNow
            };

            await _messageRepository.Create(newMessage);
            newMessageContent = string.Empty; // Reset the input field

            try
            {
                // Call the GetAndUpdateContext method after saving the user's message
                await _conversationRepository.GetAndUpdateContext(ConversationId);

                var responseMessage = await _openAiApiService.SendMessageAsync(ConversationId, newMessage.Content);

                var responseMessageDto = new MessageDTO
                {
                    Content = responseMessage,
                    ConversationId = ConversationId,
                    IsUserMessage = false,
                    Timestamp = DateTime.UtcNow
                };

                await _messageRepository.Create(responseMessageDto);

                await LoadMessages(); // Refresh the Messages list

                MessageIsProcessing = false;

                // Reload the page
                StateHasChanged();
            }
            catch (HttpRequestException)
            {
                // Handle the error condition
                snackBar.Add("An error occurred. Please try again.", Severity.Error);
            }
        }
    }

    private async Task SendDefaultMessage(int conversationId)
    {
        try
        {
            var conversation = await _conversationRepository.Get(conversationId);
            if (conversation == null)
            {
                Console.WriteLine("Conversation not found.");
                return;
            }

            var defaultMessage = new MessageDTO
            {
                Content = $"Hello!, lets Start conversation about '{newConversationName}'.",
                //Content = "Hello",
                ConversationId = conversationId,
                IsUserMessage = true,
                Timestamp = DateTime.UtcNow
            };

            await _messageRepository.Create(defaultMessage);

            var responseMessage = await _openAiApiService.SendMessageAsync(conversationId, defaultMessage.Content);
            if (string.IsNullOrEmpty(responseMessage))
            {
                Console.WriteLine("AI response is null or empty.");
                return;
            }

            var responseMessageDto = new MessageDTO
            {
                Content = responseMessage,
                ConversationId = conversationId,
                IsUserMessage = false,
                Timestamp = DateTime.UtcNow
            };

            await _messageRepository.Create(responseMessageDto);

            await LoadMessages(); // Refresh the Messages list
                                  //StateHasChanged();
            NavigateToConversation(conversationId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SendDefaultMessage: {ex.Message}");
        }
    }

    private async Task DeleteMessagePair(int promptId, int? answerId)
    {
        var result1 = await _messageRepository.Delete(promptId);

        if (answerId.HasValue)
        {
            var result2 = await _messageRepository.Delete(answerId.Value);
            if (result1 > 0 && result2 > 0)
            {
                Messages = Messages.Where(message => message.Id != promptId && message.Id != answerId.Value).ToList();
            }
            else
            {
                // Handle failure to delete one or both messages
                snackBar.Add("An error occurred. Please try again.", Severity.Error);
            }
        }
        else
        {
            if (result1 > 0)
            {
                Messages = Messages.Where(message => message.Id != promptId).ToList();
            }
            else
            {
                // Handle failure to delete the prompt message
                snackBar.Add("An error occurred. Please try again.", Severity.Error);
            }
        }
    }
    #endregion

    #region Conversation methods
    private async Task LoadConversations()
    {
        Conversations = await _conversationRepository.GetAllByClientId(clientId);
    }

    private async Task CreateConversation()
    {
        if (!string.IsNullOrWhiteSpace(newConversationName))
        {
            // Check if conversation with the same name already exists
            if (Conversations.Any(c => c.Name == newConversationName))
            {
                snackBar.Add("Conversation with the same name already exists.", Severity.Error);
                return;
            }

            // Start the spinner
            IsProcessing = true;

            var newConversation = new ConversationDTO
            {
                Name = newConversationName,
                ClientId = clientId
            };

            var createdConversation = await _conversationRepository.Create(newConversation);

            await SendDefaultMessage(createdConversation.Id);

            Conversations = await _conversationRepository.GetAllByClientId(clientId);

            newConversationName = string.Empty;
            snackBar.Add("Conversation created successfully.", Severity.Success);

            IsProcessing = false;
        }
        else
        {
            snackBar.Add("Conversation name cannot be empty.", Severity.Error);
        }
    }

    private void StartEditingConversation(int conversationId)
    {
        editingConversationId = conversationId;
        var conversation = Conversations.FirstOrDefault(c => c.Id == conversationId);
        if (conversation != null)
        {
            editingConversationName = conversation.Name;
        }
    }

    private void CancelEditingConversation()
    {
        editingConversationId = -1;
        editingConversationName = string.Empty;
    }

    private async Task UpdateConversation(int conversationId)
    {
        if (!string.IsNullOrWhiteSpace(editingConversationName))
        {
            var conversation = Conversations.FirstOrDefault(c => c.Id == conversationId);
            if (conversation != null)
            {
                conversation.Name = editingConversationName;
                await _conversationRepository.Update(conversation);
                snackBar.Add("Conversation Updated successfully.", Severity.Success);
            }
            else
            {
                snackBar.Add("Failed to update conversation.", Severity.Error);
            }

            editingConversationId = -1;
            editingConversationName = string.Empty;
        }
    }

    private async Task DeleteConversation(int conversationId)
    {
        var result = await _conversationRepository.Delete(conversationId);

        if (result > 0) // if conversation was deleted
        {
            Conversations = await _conversationRepository.GetAllByClientId(clientId);
            snackBar.Add("Conversation deleted successfully.", Severity.Success);
        }
        else
        {
            snackBar.Add("Failed to delete conversation.", Severity.Error);
        }
    }
    #endregion

    #region System Messages
    private async Task UpdateSystemMessage(int conversationId, string customText)
    {
        var systemMessage = string.Join(", ", selected.Select(chip => chip.Text));

        // Add the customText to the systemMessage if it is not null or empty.
        if (!string.IsNullOrWhiteSpace(customText))
        {
            systemMessage += ", " + customText;
        }

        var conversation = Conversations.FirstOrDefault(c => c.Id == conversationId);
        if (conversation != null)
        {
            conversation.SystemMessage = systemMessage;
            await _conversationRepository.Update(conversation);
            snackBar.Add("System message updated successfully.", Severity.Success);
        }
        else
        {
            snackBar.Add("Failed to update system message.", Severity.Error);
        }
    }

    private string GetSystemMessage(int conversationId)
    {
        try
        {
            var conversation = Conversations.FirstOrDefault(c => c.Id == conversationId);
            return conversation?.SystemMessage ?? string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred while retrieving system message: {ex.Message}");
            return "An error occurred while retrieving the system message.";
        }
    }
    #endregion




}

