@page "/chat/{ConversationId:int}"
@inject IMessageRepository _messageRepository
@inject OpenAIApiService _openAIApiService
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar
@attribute [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Client)]

@using ECommerce_Server.Service

<div class="bg-white container mx-auto flex flex-wrap">
    <div class="w-full h-screen mt-4">
        @if (IsProcessing)
        {
            <div class="text-center">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </div>
        }
        else
        {
<MudCard Elevation="25">
    <MudCarousel Class="mud-width-full" Color="@Color.Primary" Style="height:600px" EnableSwipeGesture="@enableSwipeGesture" ShowBullets="@bullets" ShowArrows="@arrows" AutoCycle="false" TData="object">
        <BulletTemplate Context="selected">
            <div Class="mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon">
                <span class="mud-icon-button-label">
                    <MudIcon Icon="@(selected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Circle)" Color="@Color.Inherit" />
                </span>
            </div>
        </BulletTemplate>
        <ChildContent>
            @if (Messages == null || Messages.Count() == 0)
            {
                <p class="mt-5 text-lrg text-bold text-center">No Messages found</p>
            }
            else
            {
                @for (int i = Messages.Count() - 2; i >= 0; i -= 2)
                {
                    var prompt = Messages[i];
                    var response = Messages[i + 1];
                    var messageNumber = (Messages.Count() - i) / 2;

                    <MudCarouselItem Transition="Transition.Fade" Class="flex flex-col">
                        <div class="bg-gray-300">
                            @if (MessageIsProcessing)
                            {
                                <p class="mt-5 text-lrg text-bold text-center">Processing...</p>
                            }
                            else
                            {
                                <MudCardHeader>
                                    <CardHeaderAvatar>
                                        <MudAvatar Color="Color.Primary">U</MudAvatar>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                        @if (prompt != null)
                                        {
                                            <div class="mr-10 h-15 p-5 overflow-x-auto overflow-y-hidden">
                                                <div class="flex items-center">
                                                    <div class="flex-shrink-0">
                                                        <MudText Typo="Typo.h6" class="whitespace-normal">@prompt.Content ?</MudText>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        <div class="absolute top-0 right-0 bg-indigo-500 text-white rounded-full p-2 text-xs">
                                            @messageNumber
                                        </div>
                                    </CardHeaderContent>
                                </MudCardHeader>
                            }

                        </div>
                        <div class="bg-gray-100 flex items-start justify-center h-screen p-5 overflow-auto">
                            @if (MessageIsProcessing)
                            {
                                <div class="text-center">
                                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                                </div>
                            }
                            else
                            {
                                <MudCardContent>
                                    <div class="flex items-center">
                                        <MudAvatar Color="Color.Secondary" Class="mr-5">AI</MudAvatar>
                                        @if (IsCodeSnippet(@response.Content))
                                        {
                                            <div class="bg-white p-10 rounded-md overflow-auto max-w-full text-xlg">
                                                <pre class="whitespace-pre-wrap"><code>@response.Content</code></pre>
                                            </div>
                                        }
                                        else
                                        {
                                            <p class="text-left text-lg">@response.Content</p>
                                        }
                                    </div>
                                    <div class="flex justify-end items-end p-4">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" @onclick="() => DeleteMessagePair(prompt.Id, response?.Id)" />
                                        @if (prompt.IsFav)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Inherit" @onclick="(() => ToggleFavorite(prompt))" />
                                        }
                                        else
                                        {
                                            <MudIconButton Icon="@Icons.Material.Outlined.FavoriteBorder" Color="Color.Default" @onclick="(() => ToggleFavorite(prompt))" />
                                        }
                                        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Default" />
                                    </div>
                                </MudCardContent>
                            }
                        </div>
                    </MudCarouselItem>
                }
            }
        </ChildContent>
    </MudCarousel>
</MudCard>
        }

        <div class="w-full md:w-1/2 lg:w-1/2 justify-center text-center mx-auto fixed bottom-0 left-0 right-0 mb-5">
            <div class="relative">
                <input type="text" class="w-full px-3 py-2 pr-12 rounded border border-gray-300" placeholder="Enter a new message" @bind="@newMessageContent" />
                <button class="absolute inset-y-0 right-0 px-4 py-2 bg-gray-600 text-white rounded-r hover:bg-gray-800" @onclick="SendMessage">Send Message</button>
            </div>
        </div>
    </div>
</div>

@code {
    public bool IsProcessing { get; set; } = false;
    public bool MessageIsProcessing { get; set; } = false;
    // Hard-coded user ID for testing purposes
    int userId = 3;
    private List<MessageDTO> Messages { get; set; } = new List<MessageDTO>();
    string newMessageContent = string.Empty;
    [Parameter] public int ConversationId { get; set; }

    bool IsCodeSnippet(string text)
    {
        // This is a simple example, you might need a more complex logic depending on your use case
        return text.Contains("<") && text.Contains(">");
    }
    private async Task ToggleFavorite(MessageDTO message)
    {
        var success = await _messageRepository.ToggleFavorite(message.Id);
        if (success)
        {
            message.IsFav = !message.IsFav;
        }
    }

    private bool arrows = false;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = false;
    private Transition transition = Transition.Slide;

    protected override async Task OnInitializedAsync()
    {
        await LoadMessages();
    }

    private async Task LoadMessages()
    {
        IsProcessing = true;

        // Load the latest messages
        Messages = (await _messageRepository.GetAllByConversationId(ConversationId)).ToList();

        IsProcessing = false;
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(newMessageContent))
        {
            MessageIsProcessing = true;

            var newMessage = new MessageDTO
            {
                Content = newMessageContent,
                ConversationId = ConversationId,
                IsUserMessage = true,
                Timestamp = DateTime.UtcNow
            };

            await _messageRepository.Create(newMessage);
            newMessageContent = string.Empty; // Reset the input field

            try
            {
                var responseMessage = await _openAIApiService.SendMessageAsync(Messages, newMessage.Content);

                var responseMessageDto = new MessageDTO
                {
                    Content = responseMessage,
                    ConversationId = ConversationId,
                    IsUserMessage = false,
                    Timestamp = DateTime.UtcNow
                };

                await _messageRepository.Create(responseMessageDto);
                // Purge old messages first
                await _messageRepository.PurgeMessages(ConversationId);

                // Delete messages with default responses and prompts
                await _messageRepository.DeleteMessagesWithDefaultResponseAndPrompts(ConversationId);

                await LoadMessages(); // Refresh the Messages list

                MessageIsProcessing = false;

                // Reload the page
                StateHasChanged();

                //_navigationManager.NavigateTo(_navigationManager.Uri, forceLoad: true);
            }
            catch (HttpRequestException)
            {
                // Handle the error condition
                snackBar.Add("An error occurred. Please try again.", Severity.Error);
            }
        }
    }

    private async Task DeleteMessagePair(int promptId, int? answerId)
    {
        var result1 = await _messageRepository.Delete(promptId);

        if (answerId.HasValue)
        {
            var result2 = await _messageRepository.Delete(answerId.Value);
            if (result1 > 0 && result2 > 0)
            {
                Messages = Messages.Where(message => message.Id != promptId && message.Id != answerId.Value).ToList();
            }
            else
            {
                // Handle failure to delete one or both messages
                snackBar.Add("An error occurred. Please try again.", Severity.Error);
            }
        }
        else
        {
            if (result1 > 0)
            {
                Messages = Messages.Where(message => message.Id != promptId).ToList();
            }
            else
            {
                // Handle failure to delete the prompt message
                snackBar.Add("An error occurred. Please try again.", Severity.Error);
            }
        }
    }
}

