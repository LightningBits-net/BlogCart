@page "/Services"
@inject IProductService _productService


<PageTitle>@CategoryName</PageTitle>

<div class="max-w-5xl mx-auto pt-20 p-8 flex justify-end">
    <h1 class="font-display-italic dark:text-white text-center font-extrabold text-5xl md:text-6xl italic leading-none mb-6 max-w-xl">Services</h1>
</div>
@if (IsProcessing)
{
    <div class="text-center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
    <div class="container mx-auto flex flex-wrap pb-20">
        @foreach (var product in ECommerceProducts)
        {
            @if (product.Category.Name == CategoryName)
            {
                <div class="w-full sm:w-1/2 md:w-1/2 lg:w-1/3 px-1 mb-12">
                    <MudCard Elevation="25">
                        <a href="/ProductDetails/@product.Id">
                            <div class="p-4">
                                <MudText Typo="Typo.h5" Color="Color.Default">@product.Name</MudText>
                                <MudText class="mt-2" Color="Color.Primary">@(product.ECommerceProductPrices.Any() ? "starting at " + product.ECommerceProductPrices.OrderBy(u => u.Price).FirstOrDefault()?.Price.ToString("c") : "sold out")</MudText>
                            </div>                            <img src="@product.ImageUrl" class="w-full h-64 object-cover" />
                        </a>
                        <div class="h-52 overflow-y-auto">
                            <MudCardContent>
                                <p class="min-h-0">
                                    <MudText Typo="Typo.body1" Color="Color.Inherit"> @((MarkupString)product.Description)</MudText>
                                </p>
                            </MudCardContent>
                        </div>
                        <MudCardActions>
                            @if (product.Color != "*")
                            {
                                <MudText Typo="Typo.body2" Color="Color.Default"> Color:@product.Color</MudText>
                            }
                            <MudSpacer />
                            <MudText Typo="Typo.body2" Color="Color.Default"> Cat:@product.Category.Name</MudText>
                        </MudCardActions>
                    </MudCard>
                </div>
            }
        }
    </div>

}
<_FooterDarkGray></_FooterDarkGray>



@code {
    public bool IsProcessing { get; set; } = false;
    public IEnumerable<ProductDTO> ECommerceProducts { get; set; } = new List<ProductDTO>();
    public string CategoryName { get; set; } = "Services";


    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        ECommerceProducts = await _productService.GetAll();
        IsProcessing = false;
    }
}

