@inject IBlogService _blogService
@inject IClientFrontendService _clientFrontendService


<div class="w-full md:w-64">
    <aside class="rounded shadow-xlg overflow-hidden mb-6">
        <h3 class="text-sm text-white bg-black py-3 px-4">Latest Post</h3>
        <div class="p-2 overflow-y-auto">

            @foreach (var blog in Blogs.OrderByDescending(u => u.DateCreated).Take(5))
            {
                <ul class="list-reset leading-normal ">
                    <li class="mb-4">
                        <a href="/lightningbits/Blog/Page/@blog.Id" class="text-sm">
                            <p class="no-underline hover:underline">@((MarkupString)blog.Name)</p>
                            <p class="text-sm">@blog.DateCreated.ToLocalTime().ToString("MM/dd/yyyy")</p>
                        </a>
                    </li>
                </ul>
            }
        </div>
    </aside>
    <aside class="rounded shadow-xlg overflow-hidden mb-6">
        <h3 class="text-sm text-white bg-black py-3 px-4">Featured</h3>
        <div class="p-2 overflow-y-auto">
            @*@foreach (var blog in Blogs.Where(u => u.Featured == true))*@
            @foreach (var blog in Blogs.Where(u => u.Featured == true).OrderByDescending(u => u.LastUpdated).Take(5))
            {
                <ul class="list-reset leading-normal">
                    <li class="mb-4">
                        <a href="/lightningbits/Blog/Page/@blog.Id" class="text-sm">
                            <p class="no-underline hover:underline">@((MarkupString)blog.Name)</p>
                            <p class="text-sm">@blog.DateCreated.ToLocalTime().ToString("MM/dd/yyyy")</p>
                        </a>
                    </li>
                </ul>
            }
        </div>
    </aside>
</div>


@code {
    public bool IsProcessing { get; set; } = false;
    public IEnumerable<BlogDTO> Blogs { get; set; } = new List<BlogDTO>();
    public IEnumerable<ClientFrontendDTO> Clients { get; set; } = new List<ClientFrontendDTO>();
    private int clientId;
    private string selectedCategory = "SelectedCategory";

    protected override async Task OnInitializedAsync()
    {
        Clients = await _clientFrontendService.GetAll();
        int clientId = GetClientIdByDomain("current-domain.com");
        await LoadBlogsByClientId(clientId);
    }

    private int GetClientIdByDomain(string domain)
    {
        var client = Clients.FirstOrDefault(c => c.DomainName == domain);
        return client?.ClientId ?? 3; // Set the default Client ID to 3
    }

    private async Task LoadBlogsByClientId(int clientId)
    {
        IsProcessing = true;
        Blogs = await _blogService.GetBlogsByClientId(clientId);
        IsProcessing = false;
    }
}

