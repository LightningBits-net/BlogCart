@page "/lightningbits/products/product-details/{ProductId:int}"
@inject IProductService _productService
@inject ICartService _cartService
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar

<head>
    <meta name="description" content="@Product.Description" />
    <meta property="og:title" content="@Product.Name" />
    <meta property="og:description" content="@Product.Description" />
    <meta property="og:image" content="@Product.ImageUrl" />
    <meta name="twitter:title" content="@Product.Name" />
    <meta name="twitter:description" content="@Product.Description" />
    <meta name="twitter:image" content="@Product.ImageUrl" />
    <meta property="og:type" content="article" />
    <meta property="og:url" content="@(_navigationManager.Uri)" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="@(_navigationManager.Uri)" />
</head>

<PageTitle>@Product.Name</PageTitle>
@if (IsProcessing)
{
    <div class="text-center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
    <div class="container mx-auto flex justify-center pb-20 pt-10">
        <div class="w-full md:w-full lg:w-1/2 px-1 mb-12">
            <MudCard Elevation="25">
                <MudCardActions class="flex flex-wrap justify-between items-center">
                    <MudText Typo="Typo.h5" Color="Color.Default">@Product.Name</MudText>
                    @if (Product.Color != "*")
                    {
                        <MudText Typo="Typo.body2" Color="Color.Default"> Color: @Product.Color</MudText>
                    }
                </MudCardActions>
                <img src="@Product.ImageUrl" class="w-full h-64 object-cover" alt="@Product.Name" />
                <MudCardContent>
                    <p class="h-48 min-h-0">
                        <MudText Typo="Typo.body1" Color="Color.Inherit"> @((MarkupString)Product.Description)</MudText>
                    </p>
                </MudCardContent>
                <MudCardActions>
                    <MudButtonGroup class="w-full flex justify-center">
                        @foreach (var productPrice in Product.ECommerceProductPrices)
                        {
                            if (productPrice.Id == DetailsVM.SelectedProductPriceId)
                            {
                                <MudButton Color="Color.Dark" Width="128px" Height="64px" Class="my-2 mr-4" Style="border: 3px solid #28A745; border-radius: 5px; box-shadow: 5px">
                                    <p class="text-center mr-2">@productPrice.MyProperty</p>
                                    <p class="text-center mr-2">@productPrice.Price.ToString("c")</p>
                                    <p class="text-center">@productPrice.Size</p>
                                </MudButton>
                            }
                            else
                            {
                                <MudButton OnClick="(args)=>SelectedProductPrice(args,productPrice.Id)" Color="Color.Info" Width="128px" Height="64px" Class="my-2 mr-4" Style="border: 1px solid; border-radius: 20px; box-shadow: 5px">
                                    <p class="text-center mr-2">@productPrice.MyProperty</p>
                                    <p class="text-center mr-2">@productPrice.Price.ToString("c")</p>
                                    <p class="text-center">@productPrice.Size</p>
                                </MudButton>
                            }
                        }
                    </MudButtonGroup>
                </MudCardActions>
                @if (DetailsVM.SelectedProductPriceId > 0)
                {
                    <MudButton Class="w-full mt-2" OnClick="AddToCart" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Add to Cart</MudButton>
                }
            </MudCard>
            <div class="flex mt-4">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="@(() => _navigationManager.NavigateTo("/lightningbits/products/product-services"))">Return</MudButton>
            </div>
        </div>
    </div>
}



@code {

    [Parameter]
    public int ProductId { get; set; }
    public ProductDTO Product { get; set; } = new();
    public bool IsProcessing { get; set; } = false;
    public DetailsVM DetailsVM { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Product = await _productService.Get(ProductId);
        IsProcessing = false;
    }

    private async Task SelectedProductPrice(MouseEventArgs e, int productPriceId)
    {
        DetailsVM.ProductPrice = Product.ECommerceProductPrices.FirstOrDefault(u => u.Id == productPriceId);
        DetailsVM.SelectedProductPriceId = productPriceId;
    }

    private async Task AddToCart()
    {
        ShoppingCart shoppingCart = new()
        {
            Count = DetailsVM.Count,
            ProductId = ProductId,
            ProductPriceId = DetailsVM.SelectedProductPriceId
        };

        await _cartService.IncrementCart(shoppingCart);
        _navigationManager.NavigateTo("/lightningbits/cart-details");
        snackBar.Add("Product added to cart Succesfully.", Severity.Success);
    }
}

