@page "/Lightningbits/cart-details/summary"
@inject MudBlazor.ISnackbar snackBar
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject IOrderService _orderService
@*@inject IPaymentService _paymentService*@
@inject NavigationManager _navigationManager
@inject MudBlazor.ISnackbar snackBar

<HeadContent>
    <meta name="description" content="@Description" />
    <meta property="og:title" content="@Title" />
    <meta property="og:description" content="@Description" />
    <meta property="og:image" content="@ImageUrl" />
    <meta name="twitter:title" content="@Title" />
    <meta name="twitter:description" content="@Description" />
    <meta name="twitter:image" content="@ImageUrl" />
    <meta property="og:type" content="article" />
    <meta property="og:url" content="@(_navigationManager.Uri)" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="@(_navigationManager.Uri)" />
</HeadContent>

<PageTitle>Order Summary</PageTitle>
@if (IsProcessing)
{
    <div class="text-center">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
}
else
{
    <div class="max-w-5xl mx-auto pt-10 pr-2 flex justify-end">
        <h1 class="font-display-italic dark:text-white text-black text-center font-extrabold text-5xl md:text-6xl italic leading-none mb-6 max-w-xl">
            Order Summary
        </h1>
    </div>
    <div class="container mx-auto flex flex-wrap justify-center pt-5 pb-5">
        <div class="w-full md:w-3/4 ">
            <table class="w-full md:table-fixed lg:table-fixed bg-gray-200 text-black">
                <thead class="w-full">
                    <tr>
                        <th class="w-1/4 px-4 py-6 border border-gray-400 text-center"></th>
                        <th class="w-1/4 px-8 py-4 border border-gray-400 text-center">Name</th>
                        <th class="w-1/4 px-8 py-4 border border-gray-400 text-center">Qty</th>
                        <th class="w-1/4 px-8 py-4 border border-gray-400 text-center">Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var prod in Order.OrderDetails)
                    {
                        <tr class="w-full">
                            <td class="border border-gray-400 flex justify-center items-center">
                                <img src="@prod.Product.ImageUrl" alt="@prod.Product.Name" width="100" height="100">
                            </td>
                            <td class="border border-gray-400 text-center">
                                <p class="w-full text-xlg"> @prod.ProductName</p>
                            </td>
                            <td class="border border-gray-400 text-center">@prod.Count</td>
                            <td class="border border-gray-400 text-center">@prod.Price.ToString("c")</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="mx-auto pt-2 flex justify-end">
                <h1 class="font-display-italic dark:text-white text-center font-extrabold text-2xl italic leading-none">
                    est Total: @Order.OrderHeader.OrderTotal.ToString("c")
                </h1>
            </div>
        </div>
    </div>
    <div class="justify-center w-1/2 mx-auto">
        <div class="form-group pt-3 pb-3">
            <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" OnClick="@ShowSnackbar">Checkout Now</MudButton>
        </div>
        <MudButton @onclick="@(() => _navigationManager.NavigateTo("/lightningbits/cart-details"))" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Return to Cart</MudButton>
    </div>
}



@code {
    public bool IsProcessing { get; set; } = false;
    private OrderDTO Order { get; set; } = null;
    public IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    private string Title = "LightningBits.com";
    private string Description = "Review your order with ease at LightningBits.com. Our personalized software solutions ensure that your order is processed smoothly and efficiently, saving you time and hassle. With a focus on innovation and customization, our dedicated developers work tirelessly to deliver software that exceeds your expectations. You can trust us to provide the best possible service, making it easy to manage your orders and keep your customers happy. Review your order now and experience the power of LightningBits.com.";
    private string ImageUrl = "/img/lb_logoLight.jpg";

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            List<ShoppingCart> cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
            Products = await _productService.GetAll();
            Order = new()
            {
                OrderHeader = new()
                {
                    OrderTotal = 0,
                    Status = SD.Status_Pending
                },
                OrderDetails = new List<OrderDetailDTO>()
            };

            foreach (var item in cart)
            {
                ProductDTO product = Products.FirstOrDefault(u => u.Id == item.ProductId);
                ProductPriceDTO productPrice = product.ECommerceProductPrices.FirstOrDefault(u => u.Id == item.ProductPriceId);

                OrderDetailDTO orderDetailDTO = new()
                {
                    ProductId = item.ProductId,
                    Size = productPrice.Size,
                    Count = item.Count,
                    Price = productPrice.Price,
                    ProductName = product.Name,
                    Product = product
                };
                Order.OrderDetails.Add(orderDetailDTO);
                Order.OrderHeader.OrderTotal += (item.Count * productPrice.Price);
            }
            if (await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails) != null)
            {
                var userInfo = await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
                Order.OrderHeader.UserId = userInfo.Id;
                Order.OrderHeader.Name = userInfo.Name;
                Order.OrderHeader.Email = userInfo.Email;
                Order.OrderHeader.PhoneNumber = userInfo.PhoneNumber;

            }

            IsProcessing = false;
            StateHasChanged();
        }
    }

    void ShowSnackbar()
    {
        snackBar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        snackBar.Configuration.PreventDuplicates = false;
        snackBar.Configuration.NewestOnTop = false;
        snackBar.Configuration.VisibleStateDuration = 10000;

        snackBar.Add(
            @"Sorry, checkout is currently unavailable. Please visit 
            <a href='https://www.upwork.com/services/product/development-it-fast-affordable-website-development-with-hosting-and-maintenance-1655578908643454976?ref=project_share' target='_blank'>Upwork</a> 
            to purchase this item.",
            Severity.Info,
            config => config.ShowCloseIcon = true);
    }

    private async Task HandleCheckout()
    {
        //try
        //{
        //    IsProcessing = true;
        //    var paymentDto = new StripePaymentDTO()
        //    {
        //        Order = Order
        //    };

        //    var result = await _paymentService.Checkout(paymentDto);

        //    var StripeSessionAndPI = result.Data.ToString().Split(';');

        //    Order.OrderHeader.SessionId = StripeSessionAndPI[0];
        //    Order.OrderHeader.PaymentIntentId = StripeSessionAndPI[1];

        //    var orderDTOSaved = await _orderService.Create(paymentDto);

        //    await _localStorage.SetItemAsync(SD.Local_OrderDetails, orderDTOSaved);

        //    await _jsRuntime.InvokeVoidAsync("redirectToCheckout", StripeSessionAndPI[0]);
        //}
        //catch (Exception e)
        //{
        //    await _jsRuntime.ToastrError(e.Message);
        //}
    }

}


