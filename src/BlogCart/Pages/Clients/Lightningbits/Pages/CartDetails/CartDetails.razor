@page "/lightningbits/cart-details"
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject IProductService _productService
@inject ICartService _cartService
@inject MudBlazor.ISnackbar snackBar

<HeadContent>
    <meta name="description" content="@Description" />
    <meta property="og:title" content="@Title" />
    <meta property="og:description" content="@Description" />
    <meta property="og:image" content="@ImageUrl" />
    <meta name="twitter:title" content="@Title" />
    <meta name="twitter:description" content="@Description" />
    <meta name="twitter:image" content="@ImageUrl" />
    <meta property="og:type" content="article" />
    <meta property="og:url" content="@(_navigationManager.Uri)" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="@(_navigationManager.Uri)" />
</HeadContent>

<PageTitle>Your Cart</PageTitle>
<div class="p-2">
    @if (IsProcessing)
    {
        <div class="text-center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </div>
    }
    else
    {
        @if (!ShoppingCart.Any())
        {
            <div class="max-w-5xl mx-auto pt-10 p-8 flex justify-end">
                <h1 class="font-display-italic font-extrabold text-5xl md:text-6xl italic leading-none mb-6 max-w-xl">OOPS! it Looks like your Shopping cart is Empty.</h1>
            </div>
            <a href="/lightningbits/products/product-services" class="block justify-center bg-indigo-500 px-4 py-2 rounded-lg text-white hover:bg-indigo-600 mx-4">return to shop</a>
        }
        else
        {
            <div class="max-w-5xl mx-auto pt-10 pr-2 flex justify-end">
                <h1 class="font-display-italic dark:text-white text-center font-extrabold text-5xl md:text-6xl italic leading-none mb-6 max-w-xl">
                    Order Review
                </h1>
            </div>
            <div class="max-w-3xl mx-auto flex justify-end">
                <p class="font-display-italic font-extrabold text-2xl md:text-2xl italic leading-none mb-6 max-w-lg">
                    est total: <strong>@OrderTotal.ToString("c")</strong>
                </p>
            </div>
            <div class="container mx-auto flex flex-wrap pb-5">
                @* Products in Cart view*@
                @foreach (var prod in ShoppingCart)
                {
                    <div class="w-full md:w-1/2 lg:w-1/3 px-2 mb-5">
                        <MudCard Elevation="25">
                            <MudCardHeader>
                                <MudText Typo="Typo.h5" Color="Color.Default">@prod.Product.Name</MudText>
                                <MudSpacer></MudSpacer>
                                <MudText Typo="Typo.body1" Color="Color.Default">@prod.ProductPrice.Price.ToString("c")</MudText>
                            </MudCardHeader>
                            <a href="/lightningbits/products/product-details/@prod.Product.Id">
                                <img src="@prod.Product.ImageUrl" alt="@prod.Product.Name" class="w-full h-32 object-cover" />
                            </a>
                            <MudCardContent class="overflow-auto">
                                <p class="h-48 min-h-0">
                                    @if (prod.Product.Color != "*")
                                    {
                                        <MudText Typo="Typo.body2" Color="Color.Primary">Color: @prod.Product.Color</MudText>
                                    }
                                    <MudText Typo="Typo.body1" Color="Color.Inherit">@((MarkupString)@prod.Product.Description)</MudText>
                                </p>
                            </MudCardContent>

                            <MudCardActions>
                                <MudText Typo="Typo.body1" Color="Color.Default">Qty: @prod.Count</MudText>
                                <MudSpacer></MudSpacer>
                                <MudButton OnClick="()=>Increment(prod.ProductId,prod.ProductPriceId,1)" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default">+</MudButton>
                                <MudButton OnClick="()=>Decrement(prod.ProductId,prod.ProductPriceId,1)" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default">-</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </div>
                }
            </div>
            <div class="flex justify-center pb-10">
                <div class="w-3/4 mx-auto flex items-center">
                    <MudButton Color="Color.Success" Variant="Variant.Filled"
                               Href="/lightningbits/cart-details/summary" class="w-1/2">Check out</MudButton>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled"
                               @onclick="@(() => _navigationManager.NavigateTo("/lightningbits/products/product-services"))"
                               class="w-1/2 ml-4">Return</MudButton>
                </div>
            </div>
        }
    }
</div>
<_FooterDarkGray></_FooterDarkGray>

@code {
    public bool IsProcessing { get; set; } = false;
    private List<ShoppingCart> ShoppingCart = new List<ShoppingCart>();
    public IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    private double OrderTotal { get; set; } = 0;
    private string Title = "LightningBits.com";
    private string Description = "Personalized Software Solutions for Your Unique Needs. With a focus on innovation and customization, I create software tailored to meet the specific needs of your business. As a dedicated developer, I work closely with you to understand your requirements and deliver software that drives success and efficiency. Trust me for your software needs and see your business soar.";
    private string ImageUrl = "/img/lb_logoLight.jpg";

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Products = await _productService.GetAll();
            await LoadCart();
            IsProcessing = false;
            StateHasChanged(); // Force a re-render after loading data
        }
    }

    private async Task LoadCart()
    {
        OrderTotal = 0;
        ShoppingCart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);

        if (ShoppingCart == null)
        {
            ShoppingCart = new List<ShoppingCart>();
            return;
        }

        foreach (var cart in ShoppingCart)
        {
            cart.Product = Products.FirstOrDefault(u => u.Id == cart.ProductId);
            cart.ProductPrice = cart.Product.ECommerceProductPrices.FirstOrDefault(u => u.Id == cart.ProductPriceId);
            OrderTotal += (cart.ProductPrice.Price * cart.Count);
        }
    }

    private async Task Increment(int ProductId, int ProductPriceId, int Count)
    {
        IsProcessing = true;
        await _cartService.IncrementCart(new()
        {
            Count = Count,
            ProductId = ProductId,
            ProductPriceId = ProductPriceId
        });

        await LoadCart();
        IsProcessing = false;
        StateHasChanged(); // Force a re-render after updating IsProcessing
    }

    private async Task Decrement(int ProductId, int ProductPriceId, int Count)
    {
        IsProcessing = true;
        await _cartService.DecrementCart(new()
        {
            Count = Count,
            ProductId = ProductId,
            ProductPriceId = ProductPriceId
        });

        await LoadCart();
        IsProcessing = false;
        StateHasChanged(); // Force a re-render after updating IsProcessing
    }
}


