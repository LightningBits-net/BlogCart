@page "/cart"
@using ViewModels
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject ICartService _cartService
@inject MudBlazor.ISnackbar snackBar

<PageTitle>Your Cart</PageTitle>
        @if (IsProcessing)
        {
            <div class="text-center">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </div>
        }
        else
        {
            @if (!ShoppingCart.Any())
            {
                <div class="max-w-5xl mx-auto pt-20 p-8 flex justify-end">
                    <h1 class="font-display-italic font-extrabold text-5xl md:text-6xl italic leading-none mb-6 max-w-xl">OOPS! it Looks like your Shopping cart is Empty.</h1>
                </div>
                <a href="/products" class="block justify-center bg-indigo-500 px-4 py-2 rounded-lg text-white hover:bg-indigo-600 mx-4">return to shop</a>

            }
            else
            {
                <div class="max-w-5xl mx-auto pt-20 pr-2 flex justify-end">
                    <h1 class="font-display-italic dark:text-white text-center font-extrabold text-5xl md:text-6xl italic leading-none mb-6 max-w-xl">
                    Order Review
                    </h1>
                </div>
                <div class="max-w-3xl mx-auto flex justify-end">
                    <p class="font-display-italic font-extrabold text-2xl md:text-2xl italic leading-none mb-6 max-w-lg">
                        est total: <strong>@OrderTotal.ToString("c")</strong>
                    </p>
                </div>
                <div class="container mx-auto flex flex-wrap pb-5">
                    @* Products in Cart view*@
                    @foreach (var prod in ShoppingCart)
                    {
                        <div class="w-full md:w-1/2 lg:w-1/3 px-2 mb-5">
                            <MudCard Elevation="25">
                                <MudCardHeader>
                                    <MudText Typo="Typo.h5" Color="Color.Default">@prod.Product.Name</MudText>
                                    <MudSpacer></MudSpacer>
                                    <MudText Typo="Typo.body1" Color="Color.Default">@prod.ProductPrice.Price.ToString("c")</MudText>
                                </MudCardHeader>
                                <a href="/ProductDetails/@prod.Product.Id">
                                    <img src="@prod.Product.ImageUrl" class="w-full h-32 object-cover" />
                                </a>
                                <MudCardContent>
                                    <p class="h-48 min-h-0">
                                        @if (prod.Product.Color != "*")
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Primary"> Color:@prod.Product.Color</MudText>
                                        }
                                        <MudText Typo="Typo.body1" Color="Color.Inherit"> @((MarkupString)@prod.Product.Description)</MudText>
                                    </p>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudText Typo="Typo.body1" Color="Color.Default">Qty: @prod.Count</MudText>
                                    <MudSpacer></MudSpacer>
                                    <MudButton OnClick="()=>Increment(prod.ProductId,prod.ProductPriceId,1)" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default">+</MudButton>
                                    <MudButton OnClick="()=>Decrement(prod.ProductId,prod.ProductPriceId,1)" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Default">-</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </div>
                    }
                </div>
                <div class="flex justify-center pb-10 w-full">
                    <a href="/summary" class="block w-1/2 bg-green-500 px-4 py-2 rounded-lg text-white hover:bg-green-600 mx-4 ">Check out</a>
                    <a href="/products" class="block w-1/2 bg-gray-600 px-4 py-2 rounded-lg text-white hover:bg-gray-400 mx-4">Keep Shopping</a>
                </div>
            }
        }


    @code {
        public bool IsProcessing { get; set; } = false;
        private List<ShoppingCart> ShoppingCart = new List<ShoppingCart>();
        private IEnumerable<ProductDTO> Products { get; set; }
        private double OrderTotal { get; set; } = 0;

        protected override async Task OnInitializedAsync()
        {
            IsProcessing = true;
            Products = await _productService.GetAll();
            await LoadCart();
            IsProcessing = false;
        }

        private async Task LoadCart()
        {
            OrderTotal = 0;
            ShoppingCart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
            foreach (var cart in ShoppingCart)
            {
                cart.Product = Products.FirstOrDefault(u => u.Id == cart.ProductId);
                cart.ProductPrice = cart.Product.ECommerceProductPrices.FirstOrDefault(u => u.Id == cart.ProductPriceId);
                OrderTotal += (cart.ProductPrice.Price * cart.Count);
            }
        }

        private async Task Increment(int ProductId, int ProductPriceId, int Count)
        {
            IsProcessing = true;
            await _cartService.IncrementCart(new()
            {
                Count = Count,
                ProductId = ProductId,
                ProductPriceId = ProductPriceId
            });

            await LoadCart();
            IsProcessing = false;
        }

        private async Task Decrement(int ProductId, int ProductPriceId, int Count)
        {
            IsProcessing = true;
            await _cartService.DecrementCart(new()
            {
                Count = Count,
                ProductId = ProductId,
                ProductPriceId = ProductPriceId
            });

            await LoadCart();
            IsProcessing = false;
        }
    }
